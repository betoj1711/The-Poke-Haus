// High-value calc (manual + optional TCGplayer proxy)
const hvState={rows:[]};
function money(n){return n.toLocaleString(undefined,{style:'currency',currency:'USD',minimumFractionDigits:2})}
function tierFromSales(meta){if(!meta)return{label:'Medium',pct:.70};if((meta.salesRank&&meta.salesRank<=500)||(meta.volume30d&&meta.volume30d>=50))return{label:'High',pct:.80};if((meta.salesRank&&meta.salesRank<=2000)||(meta.volume30d&&meta.volume30d>=10))return{label:'Medium',pct:.70};return{label:'Low',pct:.60}}
function condMult(c){if(c==='LP')return .92;if(c==='MP')return .85;return 1}
function pushRow(r){hvState.rows.push(r);renderHV()}
async function fetchMarket(){
  const name=document.getElementById('cardName').value.trim();const set=document.getElementById('cardSet').value.trim();const cond=document.getElementById('condition').value;const qty=parseInt(document.getElementById('qty').value||'1',10);
  if(!name){alert('Enter a card name');return}
  try{const res=await fetch(`/api/tcg?name=${encodeURIComponent(name)}&set=${encodeURIComponent(set)}`);if(!res.ok)throw new Error('Proxy error');const data=await res.json();const m=parseFloat(data.market||0);if(m<5){alert('Under $5 — ignored');return}const t=tierFromSales({salesRank:data.salesRank,volume30d:data.volume30d});const p=m*t.pct*condMult(cond);pushRow({name:data.name||name,set:data.set||set,cond,qty,market:m,tier:t.label,pct:t.pct,payout:p})}catch(e){alert('Proxy not set — use Add Manually or deploy /api/tcg')}
}
function addManual(){const name=document.getElementById('cardName').value.trim();const set=document.getElementById('cardSet').value.trim();const cond=document.getElementById('condition').value;const qty=parseInt(document.getElementById('qty').value||'1',10);const m=parseFloat(prompt('Enter Market Price (USD) for this card:','5.00')||'0');if(!name||m<5){alert('Card name required and market must be $5+');return}const t=tierFromSales(null);const p=m*t.pct*condMult(cond);pushRow({name,set,cond,qty,market:m,tier:t.label,pct:t.pct,payout:p})}
function renderHV(){const tbody=document.getElementById('hvBody');tbody.innerHTML='';let total=0;hvState.rows.forEach((r,i)=>{const sub=r.payout*r.qty;total+=sub;const tr=document.createElement('tr');tr.innerHTML=`<td>${r.name}</td><td>${r.set||''}</td><td>${r.cond}</td><td class="right">${money(r.market)}</td><td>${r.tier}</td><td class="right">${money(r.payout)}</td><td class="right">${r.qty}</td><td class="right">${money(sub)}</td><td><button class="btn red tiny" data-i="${i}">Remove</button></td>`;tbody.appendChild(tr)});document.getElementById('hvTotal').textContent=money(total);const lines=hvState.rows.map(r=>({name:r.name,set:r.set,cond:r.cond,qty:r.qty,market:r.market,tier:r.tier,percent:r.pct,payoutPer:r.payout}));const hf=document.getElementById('hv_lines');if(hf)hf.value=JSON.stringify(lines);const ht=document.getElementById('hv_total');if(ht)ht.value=total.toFixed(2);[...tbody.querySelectorAll('button.tiny')].forEach(btn=>{btn.addEventListener('click',()=>{const idx=parseInt(btn.getAttribute('data-i'),10);hvState.rows.splice(idx,1);renderHV()})})}
document.addEventListener('DOMContentLoaded',()=>{document.getElementById('fetchBtn').addEventListener('click',fetchMarket);document.getElementById('addManualBtn').addEventListener('click',addManual);document.getElementById('hvReset').addEventListener('click',()=>{hvState.rows=[];renderHV()})});
